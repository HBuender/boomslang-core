grammar org.boomslang.dsl.feature.Feature hidden(WS, /* change for TextToEol NL,*/ ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://wireframesketcher.com/1.0/model.ecore" as uid
import "org.boomslang.core" as bcore
generate feature "http://www.esgroup.ch/boomslang/dsl/feature/Feature"

// ============================================================================
// Main elements   
// ============================================================================
BPackage returns bcore::BPackage:
	BFeaturePackage;

BFeaturePackage:
	'package' name=QualifiedName
	bImports+=BImport*
	bFeature+=BFeature;

BImport returns bcore::BImport:
	'import' importedNamespace=QualifiedNameWithWildCard;

BNamedModelElement returns bcore::BNamedModelElement:
	BFeature | BParameter;

BFeature:
	(AtTagScreen tagScreenMode=TagMode?)?
	'Feature' name=ID
	background=BBackground
	'Tester' testerID=ID
	(scenarios+=BScenario)*;

BBackground:
	AsA role=STRING 
	IwantTo effect=STRING
	InOrderTo benefit=STRING;

BParameter:
	AtParam name=ID;

BScenario:
	(comment=ML_DOCUMENTATION)?
	((params+=BParameter+
	AtDataProvider dataProvider=QualifiedName)? &
	(AtDependsOn preScenario=[BScenario|QualifiedName])?)
	'Scenario' name=StringOrId
	GivenIamOnThe bToScreenSwitch=BToScreenSwitch
	codeStatements+=BCodeStatement*;

BScreenContext:
	BToScreenSwitch;

BToScreenSwitch:
	{BToScreenSwitch}
	//screen=[uid::Screen|QualifiedName]  ('::' componentPartScreen=[uid::Screen|QualifiedName])? 'screen'
	//(OnTab componentScreen=[uid::Screen|QualifiedName] '::' | OnScreen) screen=[uid::Screen|QualifiedName] 
	screen=[uid::Screen|QualifiedName] OnScreen;

BCodeStatement:
	(AndI | WhenI) BCommandComponentActionParameter |
	(AndThe | ThenThe | ThenIt) BAssertionComponentActionParameter |
	ThenIAmOnThe BToScreenSwitch |
	{BCodeStatement} FinallyICloseIt;

BCommandComponentActionParameter:
	BCommandComponent | BImplementationCommand;

BAssertionComponentActionParameter:
	BAssertionComponent | BImplementationAssertion;

	// ============================================================================
// Component   
// ============================================================================
BCommandComponent:
	action=BCommandAction widget=BWidgetWrapper;

BAssertionComponent:
	widget=BWidgetWrapper action=BAssertionAction;

	// ============================================================================
// Command Actions   
// ============================================================================
BCommandAction:
	BClickAction | BSelectAction | BTypeAction | BDoubleClickAction | BCheckAction |BMenuSelectAction
	//	| BTabPaneSelectTabAction
	//	| BTreeAction
//	| BCloseAction
	;

BClickAction:
	{BClickAction}
	ClickThe ((bTableSelectParameter=BTableSelectParameter | bTileParameter=BTileParameter | bPopupEntry=BPopupEntry) FromThe)?;

BSelectAction:
	{BSelectAction}
	 (Select selectParameter=BSelectParameter |SelectThe bTableSelectParameter=BTableSelectParameter |Select bDateSelectParameter=BDateSelectParameter) FromThe;

BPopupEntry:
	{BPopupEntry}
	popupEntry=STRING
;

BMenuSelectAction:
	{BMenuSelectAction}
	SelectThe entryName=STRING FromThe
;


BTypeAction:
	{BTypeAction}
	Type value=BStringOrParam In;

BDoubleClickAction:
	{BDoubleClickAction}
	(DoubleClickThe (bTableSelectParameter=BTableSelectParameter | bTileParameter=BTileParameter|bSelectParameter=BSelectParameter) FromThe) |{BDoubleClickAction}
	DoubleClickThe; 

BCheckAction:
	{BCheckAction}
	Check (bTableSelectParameter=BTableSelectParameter)?;

	//BTabPaneSelectTabAction:
//	{BTabPaneSelectTabAction}
//	ISelectThe bTabItemWrapper=BTabItemWrapper
//;
//
//BTabItemWrapper:
//	tabItem=[uid::Item|QualifiedName] 'tab'
//;
//
//BTableAction:
//	{BTableAction}
//	ActivateTheCell 
//	(columnIndex=INT|columnName=BStringOrParam)','(row=INT|rowValue=BStringOrParam)
//;
//
//BTreeAction:
//	{BTreeAction}
//	IActivateTheNode nodeQName=NodeQName
//;
//
//BContextMenuAction:
//	SelectTheEntry nodeQName=NodeQName
//;
//
//BAccordionCommand:
//	{BAccordionCommand}
//	ActivateTheArea (row=BIntOrStringOrParam)
//;
//BCloseAction:
//	{BCloseAction} CloseIt;

	// ============================================================================
// Assertion Actions   
// ============================================================================
BAssertionAction:
	BPropertyAssertionAction | BBooleanAssertionAction | BContainsAssertionAction | BSelectionAssertionAction |
	BMatchesAssertionAction | BEqualsAssertion
//	| BTabAssertion
	;

BPropertyAssertionAction:
	Property propertyName=ID operator=BCompareOperator value=BIntOrStringOrParam;

BBooleanAssertionAction:
	{BBooleanAssertionAction}
	Is (booleanPropertyNotTrue?=Not)? booleanPropertyName=ID;
	// Make multiple values selectable for e.g. lists
BContainsAssertionAction:
	Contains ((No|A|An) (bTableSelectParameter=BTableSelectParameter WithValue operator=BCompareOperator|Entry))? value=BIntOrStringOrParam;

BSelectionAssertionAction:
	SelectedEntry operator=BCompareOperator value=BIntOrStringOrParam;

BMatchesAssertionAction:
	Matches value=BStringOrParam;

BEqualsAssertion:
	(Equals | NotEquals) value=BStringOrParam;
 
//BTabAssertion:
//	SelectedTabIs bTabItemWrapper=BTabItemWrapper;

	// ============================================================================
// Parameter   
// ============================================================================
BDateSelectParameter:
	TheDate parameter=BStringOrParam
;
 
//SelectParameter for List widget (Combo, List)
BSelectParameter:
	BListSelectParameter;

BListSelectParameter:
	BSelectNamesParameter | BSelectValuesParameter | BSelectIndicesParameter;
	//TODO Convert names, values, indices to parser rules

BSelectNamesParameter:
	'name' parameters+=BIntOrStringOrParam (',' parameters+=BIntOrStringOrParam)*;

BSelectValuesParameter:
	'value' parameters+=BIntOrStringOrParam (',' parameters+=BIntOrStringOrParam)*;

BSelectIndicesParameter:
	'indice' parameters+=BIntOrParam (',' parameters+=BIntOrParam)*;

	// ============================================================================
// Table Parameter   
// ============================================================================
BTableSelectParameter: 
	CellWhere tableCriteria+=BTableCriteria ('and' tableCriteria+=BTableCriteria)*;

BTableCriteria:
	(column?=Column | Row) operator=BCompareOperator value=BIntOrStringOrParam;

BCompareOperator:
	Equals | NotEquals | Matches | Contains | IndexEquals;

	// ============================================================================
// Tile Parameter   
// ============================================================================
BTileParameter:
	Where (bPropertyAssertionAction=BPropertyAssertionAction | bBooleanAssertionAction=BBooleanAssertionAction |
	bAssertionComponent=BAssertionComponent);

BImplementationCommand:
	freeText=STRING;

	// ============================================================================
// Assertion Parameter   
// ============================================================================


// ============================================================================
// Rules that allow literals or references to parameters   
// ============================================================================

// either text or param may be set, but not both
BStringOrParam:
	(text=STRING | param=[BParameter|AtSignThenIdOrKeyword]);

	// either int or param may be set, but not both
BIntOrParam:
	(int=INT | param=[BParameter|AtSignThenIdOrKeyword]);

BIntOrStringOrParam:
	(int=INT | text=STRING | param=[BParameter|AtSignThenIdOrKeyword]);

IdOrStringOrInt:
	ID |
	INT |
	STRING;

	// ============================================================================
// Implemented assertions   
// ============================================================================
BImplementationAssertion:
	freeText=STRING;

BWidgetWrapper:
	widget=[uid::Widget|QualifiedName] widgetType=IdOrKeyword;

QualifiedName:
	IdOrKeyword ('.' IdOrKeyword)*;

QualifiedNameWithWildCard:
	QualifiedName '.*'?;

NodeQName:
	segment+=BIntOrStringOrParam ('>' segment+=BIntOrStringOrParam)*;

	// ============================================================================
// Keyword sequences (datatype rules), content assist will be offered  
// ============================================================================
GivenIamOnThe:
	'Given' 'I' 'am' 'on' 'the';

OnScreen:
	'screen';

OnTab:
	'tab';

AndI:
	'and' 'I';

WhenI:
	'when' 'I';

ThenIAmOnThe:
	'then' 'I' 'am' 'on' 'the';

AndThe:
	'and' 'the';

ThenIt:
	'then' 'it';

ThenThe:
	'then' 'the';

AsA:
	'As' 'a';

IwantTo:
	'I' 'want' 'to';

InOrderTo:
	'In' 'order' 'to';

FromThe:
	'from' 'the';

FinallyICloseIt:
	'finally' 'I' 'close' 'it';

Where:
	'where';

Contains:
	'contains';

WithValue:
	'with' 'value'
;
IActivateTheNode:
	'I' 'activate' 'the' 'node';

ActivateTheCell:
	'activate' 'the' 'cell';

ActivateTheArea:
	'activate' 'the' 'area';

SelectTheEntry:
	'select' 'the' 'entry';

SelectThe:
	'select' 'the';

SwitchToThe:
	'switch' 'to' 'the';

SelectedEntry:
	'selected' 'entry';

SelectedTabIs:
	'selected' 'tab' 'is';
TheDate:
	'the' 'date'
;
Matches:
	'matches';

Equals:
	'equals';

NotEquals:
	'not' 'equals';

IndexEquals:
	'index' 'equals';

IClick:
	'I' 'click';

Click:
	'click';

ClickThe:
	'click' 'the';

ISelect:
	'I' 'select';

Select:
	'select';


ISelectThe:
	'I' 'select' 'the';

IType:
	'I' 'type';

Type:
	'type';

CloseIt:
	'close' 'it';

CellWhere:
	'cell' 'where';

TheCellWhere:
	'the' 'cell' 'where';

Column:
	'column';

Row:
	'row';

InThe:
	'in' 'the';

IDoubleClick:
	'I' 'double' 'click';

DoubleClick:
	'double' 'click';

DoubleClickThe:
	'double' 'click' 'the';

ICheck:
	'I' 'check';

Check:
	'check';

Is:
	'is';
In:
	'in'
;

No:
	'no'
;

Entry:
	'entry'
;


A:
	'a'
;

An:
	'an'
; 

Not:
	'not';

Property:
	'property';

	/** 
 * contains any keywords that are in the grammar and should be allowed in free text
 */
Word:
	IdOrKeyword |
	INT |
	STRING |
	ML_COMMENT |
	SL_COMMENT |
	ANY_OTHER;

AtParam hidden():
	'@' 'param';

AtDataProvider hidden():
	'@' 'dataProvider';

AtDependsOn:
	'@' 'dependsOn';

AtSignThenIdOrKeyword:
	'@' IdOrKeyword;

AtTagScreen:
	'@' 'tagScreen';

enum ValidKeysToPress:
	ENTER |
	SPACE |
	TAB;

	// rule for the generated Ecore model
enum TagModeEnum:
	unspecified | // first literal is the default
	TRUE |
	FALSE;

	// rule for the DSL editor
enum TagMode returns TagModeEnum:
	TRUE |
	FALSE;

IdOrKeyword:
	ID |
	Keyword;

StringOrId:
	ID | STRING;

Keyword:
	',' |
	'a' |
	'activate' |
	'am' |
	'and' |
	'are' |
	'As' |
	'as' |
	'capture' |
	'cell' |
	'click' |
	'close' |
	'column' |
	'contains' |
	'dataProvider' |
	'datatype' |
	'dependsOn' |
	'equals' |
	'exclude' |
	'false' |
	'Feature' |
	'file' |
	'from' |
	'Given' |
	'I' |
	'import' |
	'In' |
	'in' |
	'include' |
	'indices' |
	'into' |
	'is' |
	'it' |
	'like' |
	'looks' |
	'names' |
	'node' |
	'not' |
	'no' |
	'on' |
	'order' |
	'package' |
	'param' |
	'row' |
	'Scenario' |
	'screen' |
	'screenshot' |
	'select' |
	'selected' |
	'tagScreen' |
	'tab' |
	'tabbedPane' |
	'the' |
	'then' |
	'to' |
	'true' |
	'type' |
	'values' |
	'want' |
	'when' |
	'where';

	// ============================================================================
// From the Xtext builtin Terminals grammar, changed WS and NL rules  
// ============================================================================
terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal INT returns ecore::EInt:
	('0'..'9')+;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

terminal ML_DOCUMENTATION:
	'/**'->'*/';

terminal ML_COMMENT:
	'/*' (!'*')->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

	// original:
terminal WS:
	(' ' | '\t' | '\r' | '\n')+;
	// change for TextToEol:
//terminal WS       : (' '|'\t')+;
//terminal NL       : ('\r'|'\n')+;
terminal ANY_OTHER:
	.;