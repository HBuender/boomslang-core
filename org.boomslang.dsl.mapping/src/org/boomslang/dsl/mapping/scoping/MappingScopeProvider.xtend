/*
 * generated by Xtext 2.10.0
 */
package org.boomslang.dsl.mapping.scoping

import com.wireframesketcher.model.WidgetContainer
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.impl.FilteringScope
import org.boomslang.dsl.mapping.mapping.BWidgetMapping
import org.boomslang.dsl.mapping.mapping.BMapping

import static extension org.eclipse.xtext.EcoreUtil2.*
import com.wireframesketcher.model.Master
import com.wireframesketcher.model.Screen

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class MappingScopeProvider extends AbstractDeclarativeScopeProvider {

	def IScope scope_BWidgetMapping_widget(BWidgetMapping ctx, EReference ref) {
		allowElementsInItsBWidgetContainer(ctx, ref)
	}
	
	/**
	 * Mappings in the mapping DSL may only refer to elements in a screen 
	 * that is referenced at the beginning of the mapping DSL file   
	 */
	def IScope allowElementsInItsBWidgetContainer(EObject dslObject, EReference ref) {
		val originalScope = delegateGetScope(dslObject, ref)

		val allowedWidgetContainer = dslObject.getContainerOfType(BMapping)?.screen

		if (allowedWidgetContainer == null) {
			return IScope.NULLSCOPE
		}

		return new FilteringScope(originalScope,
			[ candidate |
				val objectOrProxy = candidate.EObjectOrProxy
				val EObject candidateEObject = if (objectOrProxy.eIsProxy) {
						EcoreUtil.resolve(objectOrProxy, dslObject);
					} else {
						objectOrProxy
					}
				val candidateContainer = candidateEObject.getContainerOfType(Screen)
				return candidateContainer == allowedWidgetContainer
			])
	}
	
		/**
	 * Since a screen can refer to multiple different component screens. This method adds all screens to
	 * the return set that are used by the referenced screen
	 */
	def getAllReferencedScreens(WidgetContainer container){
		val retList= newArrayList(container);
		container.widgets.filter[it instanceof Master].forEach[retList.add((it as Master).screen)]
		return retList
	}


}
