module org.boomslang.dsl.mapping.GenerateMapping

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*
import org.boomslang.core.*
import org.boomslang.core.mwe2.custom.directorycleaner.*
import org.boomslang.core.mwe2.custom.projectconfiguration.*

var rootPath = ".."
var projectName = "org.boomslang.dsl.mapping"
var runtimeProject = "${rootPath}/${projectName}"
Workflow {
	
	component = XtextGenerator {
		cleaner=CustomXtextDirectoryCleaner{
			enabled=true
			useDefaultExcludes=true
			extraDirectory = "${runtimeProject}/src-gen"
			extraDirectory = "${runtimeProject}/xtend-gen"
			extraDirectory = "${runtimeProject}/model"
			extraDirectory = "${runtimeProject}.ide/src-gen"
			extraDirectory = "${runtimeProject}.ui/src-gen"
			extraDirectory="${runtimeProject}.tests/src-gen"
			exclude="${rootPath}/org.boomslang.core/src-gen"
		}
		configuration = {
			project = CustomProjectConfig {
				baseName = "${projectName}"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
				
				subProject={
					enabled=true
					root="${rootPath}/org.boomslang.core"
					name="org.boomslang.core"
					overwriteSrc=false
				}
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "org.boomslang.dsl.mapping.Mapping"
			fileExtensions = "mapping"

			referencedResource = "platform:/resource/org.boomslang.core/model/BCore.genmodel"
			referencedResource= "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
			referencedResource="platform:/resource/com.wireframesketcher.model/model/model.genmodel"

			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			
			generator=generator.GeneratorFragment2{
				generateStub=false
			}
		    // serializer 2.0
            fragment = serializer.SerializerFragment2  {
                generateStub = false
            }
            
            fragment=formatting.Formatter2Fragment2 {
            	generateStub=true
            }
		}
	}
}
