/*
 * generated by Xtext 2.10.0
 */
package org.boomslang.dsl.mapping.ui.quickfix

import org.boomslang.core.validation.PackageFolderStructureValidator
import org.boomslang.dsl.mapping.mapping.BMapping
import org.boomslang.dsl.mapping.mapping.MappingFactory
import org.boomslang.dsl.mapping.validation.MappingValidator
import org.boomslang.ui.quickfix.PackageFolderStructureQuickfix
import com.google.inject.Inject
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue

import static extension org.eclipse.xtext.EcoreUtil2.*


/**
 * Custom quickfixes.
 *
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
class MappingQuickfixProvider extends DefaultQuickfixProvider {


	@Inject PackageFolderStructureQuickfix packageFolderStructureQuickfix

    
	/**
	 * Renames the package declaration so it matches the name of the project it is in,
	 * or moves the file so that the directory structure matches the package name. 
	 */
	@Fix(PackageFolderStructureValidator::PACKAGE_FOLDER_STRUCTURE)
	def public void renamePackage(Issue issue, IssueResolutionAcceptor acceptor) {
		packageFolderStructureQuickfix.alignPackageAndFolder(issue, acceptor)
	}
	
	
	@Fix(MappingValidator::WIDGET_NOT_MAPPED)
    def public void addAdditionalMapping(Issue issue, IssueResolutionAcceptor acceptor) {
        val splitted = issue.data.get(0).split(";")
        if (splitted.length < 2) {
            return
        }
        acceptor.accept(issue, "Create missing mapping for " + splitted.get(0),
            "Create missing mapping for " + splitted.get(0) + " " + splitted.get(1), null, [ element, context |
                val mapping = element.getContainerOfType((typeof(BMapping)))
                val locatedWidget = mapping?.screen?.widgets.filter [
                    splitted.get(0).equals(it.name) && it.class.name.contains(splitted.get(1))
                ]
                if (locatedWidget.length > 0) {
                    mapping.BWidgetMapping.add(mapping.BWidgetMapping.size,
                        MappingFactory::eINSTANCE.createBWidgetMapping => [
                            widget = locatedWidget.get(0)
                            locator = MappingFactory::eINSTANCE.createMStringLiteral => [
                                value = "replaceWithTheCorrectId"
                            ]
                        ])
                }
            ])
    }
}


